# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import results_pb2 as results__pb2


class TagTunnelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompleteTest = channel.unary_unary(
                '/ResultsProcessor.TagTunnel/CompleteTest',
                request_serializer=results__pb2.CompleteTestRequest.SerializeToString,
                response_deserializer=results__pb2.CompleteTestResponse.FromString,
                )
        self.EnumerateErrors = channel.unary_unary(
                '/ResultsProcessor.TagTunnel/EnumerateErrors',
                request_serializer=results__pb2.EnumerateErrorsRequest.SerializeToString,
                response_deserializer=results__pb2.EnumerateErrorsResponse.FromString,
                )
        self.EnumerateTags = channel.unary_unary(
                '/ResultsProcessor.TagTunnel/EnumerateTags',
                request_serializer=results__pb2.EnumerateTagsRequest.SerializeToString,
                response_deserializer=results__pb2.EnumerateTagsResponse.FromString,
                )
        self.SubmitError = channel.unary_unary(
                '/ResultsProcessor.TagTunnel/SubmitError',
                request_serializer=results__pb2.SubmitErrorRequest.SerializeToString,
                response_deserializer=results__pb2.SubmitErrorResponse.FromString,
                )
        self.SubmitTag = channel.unary_unary(
                '/ResultsProcessor.TagTunnel/SubmitTag',
                request_serializer=results__pb2.SubmitTagRequest.SerializeToString,
                response_deserializer=results__pb2.SubmitTagResponse.FromString,
                )


class TagTunnelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CompleteTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnumerateErrors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnumerateTags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TagTunnelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompleteTest': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTest,
                    request_deserializer=results__pb2.CompleteTestRequest.FromString,
                    response_serializer=results__pb2.CompleteTestResponse.SerializeToString,
            ),
            'EnumerateErrors': grpc.unary_unary_rpc_method_handler(
                    servicer.EnumerateErrors,
                    request_deserializer=results__pb2.EnumerateErrorsRequest.FromString,
                    response_serializer=results__pb2.EnumerateErrorsResponse.SerializeToString,
            ),
            'EnumerateTags': grpc.unary_unary_rpc_method_handler(
                    servicer.EnumerateTags,
                    request_deserializer=results__pb2.EnumerateTagsRequest.FromString,
                    response_serializer=results__pb2.EnumerateTagsResponse.SerializeToString,
            ),
            'SubmitError': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitError,
                    request_deserializer=results__pb2.SubmitErrorRequest.FromString,
                    response_serializer=results__pb2.SubmitErrorResponse.SerializeToString,
            ),
            'SubmitTag': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTag,
                    request_deserializer=results__pb2.SubmitTagRequest.FromString,
                    response_serializer=results__pb2.SubmitTagResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ResultsProcessor.TagTunnel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TagTunnel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CompleteTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultsProcessor.TagTunnel/CompleteTest',
            results__pb2.CompleteTestRequest.SerializeToString,
            results__pb2.CompleteTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnumerateErrors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultsProcessor.TagTunnel/EnumerateErrors',
            results__pb2.EnumerateErrorsRequest.SerializeToString,
            results__pb2.EnumerateErrorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnumerateTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultsProcessor.TagTunnel/EnumerateTags',
            results__pb2.EnumerateTagsRequest.SerializeToString,
            results__pb2.EnumerateTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultsProcessor.TagTunnel/SubmitError',
            results__pb2.SubmitErrorRequest.SerializeToString,
            results__pb2.SubmitErrorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ResultsProcessor.TagTunnel/SubmitTag',
            results__pb2.SubmitTagRequest.SerializeToString,
            results__pb2.SubmitTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
