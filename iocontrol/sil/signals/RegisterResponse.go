// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package signals

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RegisterResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRegisterResponse(buf []byte, offset flatbuffers.UOffsetT) *RegisterResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RegisterResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishRegisterResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRegisterResponse(buf []byte, offset flatbuffers.UOffsetT) *RegisterResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RegisterResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRegisterResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RegisterResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RegisterResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RegisterResponse) Ok() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *RegisterResponse) MutateOk(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *RegisterResponse) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RegisterResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RegisterResponseAddOk(builder *flatbuffers.Builder, ok bool) {
	builder.PrependBoolSlot(0, ok, true)
}
func RegisterResponseAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(error), 0)
}
func RegisterResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
