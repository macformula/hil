// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package signals

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReadRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsReadRequest(buf []byte, offset flatbuffers.UOffsetT) *ReadRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishReadRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReadRequest(buf []byte, offset flatbuffers.UOffsetT) *ReadRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReadRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReadRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReadRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadRequest) EcuName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadRequest) SignalName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ReadRequest) SignalType() SIGNAL_TYPE {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SIGNAL_TYPE(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ReadRequest) MutateSignalType(n SIGNAL_TYPE) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *ReadRequest) SignalDirection() SIGNAL_DIRECTION {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SIGNAL_DIRECTION(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ReadRequest) MutateSignalDirection(n SIGNAL_DIRECTION) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func ReadRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ReadRequestAddEcuName(builder *flatbuffers.Builder, ecuName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ecuName), 0)
}
func ReadRequestAddSignalName(builder *flatbuffers.Builder, signalName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signalName), 0)
}
func ReadRequestAddSignalType(builder *flatbuffers.Builder, signalType SIGNAL_TYPE) {
	builder.PrependInt8Slot(2, int8(signalType), 0)
}
func ReadRequestAddSignalDirection(builder *flatbuffers.Builder, signalDirection SIGNAL_DIRECTION) {
	builder.PrependInt8Slot(3, int8(signalDirection), 0)
}
func ReadRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
