// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package signals

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReadResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsReadResponse(buf []byte, offset flatbuffers.UOffsetT) *ReadResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReadResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishReadResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsReadResponse(buf []byte, offset flatbuffers.UOffsetT) *ReadResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReadResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedReadResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ReadResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReadResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReadResponse) SignalValueType() SignalValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SignalValue(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ReadResponse) MutateSignalValueType(n SignalValue) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ReadResponse) SignalValue(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *ReadResponse) Ok() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

func (rcv *ReadResponse) MutateOk(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *ReadResponse) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ReadResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ReadResponseAddSignalValueType(builder *flatbuffers.Builder, signalValueType SignalValue) {
	builder.PrependByteSlot(0, byte(signalValueType), 0)
}
func ReadResponseAddSignalValue(builder *flatbuffers.Builder, signalValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signalValue), 0)
}
func ReadResponseAddOk(builder *flatbuffers.Builder, ok bool) {
	builder.PrependBoolSlot(2, ok, true)
}
func ReadResponseAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(error), 0)
}
func ReadResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
