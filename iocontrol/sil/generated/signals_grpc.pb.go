// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: proto/signals.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignalsClient is the client API for Signals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalsClient interface {
	EnumerateRegisteredSignals(ctx context.Context, in *EnumerateRegisteredSignalsRequest, opts ...grpc.CallOption) (*EnumerateRegisteredSignalsResponse, error)
	WriteSignal(ctx context.Context, in *WriteSignalRequest, opts ...grpc.CallOption) (*WriteSignalResponse, error)
	ReadSignal(ctx context.Context, in *ReadSignalRequest, opts ...grpc.CallOption) (*ReadSignalResponse, error)
	RegisterSignal(ctx context.Context, in *RegisterSignalRequest, opts ...grpc.CallOption) (*RegisterSignalResponse, error)
}

type signalsClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalsClient(cc grpc.ClientConnInterface) SignalsClient {
	return &signalsClient{cc}
}

func (c *signalsClient) EnumerateRegisteredSignals(ctx context.Context, in *EnumerateRegisteredSignalsRequest, opts ...grpc.CallOption) (*EnumerateRegisteredSignalsResponse, error) {
	out := new(EnumerateRegisteredSignalsResponse)
	err := c.cc.Invoke(ctx, "/signals.Signals/EnumerateRegisteredSignals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalsClient) WriteSignal(ctx context.Context, in *WriteSignalRequest, opts ...grpc.CallOption) (*WriteSignalResponse, error) {
	out := new(WriteSignalResponse)
	err := c.cc.Invoke(ctx, "/signals.Signals/WriteSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalsClient) ReadSignal(ctx context.Context, in *ReadSignalRequest, opts ...grpc.CallOption) (*ReadSignalResponse, error) {
	out := new(ReadSignalResponse)
	err := c.cc.Invoke(ctx, "/signals.Signals/ReadSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalsClient) RegisterSignal(ctx context.Context, in *RegisterSignalRequest, opts ...grpc.CallOption) (*RegisterSignalResponse, error) {
	out := new(RegisterSignalResponse)
	err := c.cc.Invoke(ctx, "/signals.Signals/RegisterSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalsServer is the server API for Signals service.
// All implementations must embed UnimplementedSignalsServer
// for forward compatibility
type SignalsServer interface {
	EnumerateRegisteredSignals(context.Context, *EnumerateRegisteredSignalsRequest) (*EnumerateRegisteredSignalsResponse, error)
	WriteSignal(context.Context, *WriteSignalRequest) (*WriteSignalResponse, error)
	ReadSignal(context.Context, *ReadSignalRequest) (*ReadSignalResponse, error)
	RegisterSignal(context.Context, *RegisterSignalRequest) (*RegisterSignalResponse, error)
	mustEmbedUnimplementedSignalsServer()
}

// UnimplementedSignalsServer must be embedded to have forward compatible implementations.
type UnimplementedSignalsServer struct {
}

func (UnimplementedSignalsServer) EnumerateRegisteredSignals(context.Context, *EnumerateRegisteredSignalsRequest) (*EnumerateRegisteredSignalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateRegisteredSignals not implemented")
}
func (UnimplementedSignalsServer) WriteSignal(context.Context, *WriteSignalRequest) (*WriteSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSignal not implemented")
}
func (UnimplementedSignalsServer) ReadSignal(context.Context, *ReadSignalRequest) (*ReadSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSignal not implemented")
}
func (UnimplementedSignalsServer) RegisterSignal(context.Context, *RegisterSignalRequest) (*RegisterSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSignal not implemented")
}
func (UnimplementedSignalsServer) mustEmbedUnimplementedSignalsServer() {}

// UnsafeSignalsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalsServer will
// result in compilation errors.
type UnsafeSignalsServer interface {
	mustEmbedUnimplementedSignalsServer()
}

func RegisterSignalsServer(s grpc.ServiceRegistrar, srv SignalsServer) {
	s.RegisterService(&Signals_ServiceDesc, srv)
}

func _Signals_EnumerateRegisteredSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateRegisteredSignalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalsServer).EnumerateRegisteredSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signals.Signals/EnumerateRegisteredSignals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalsServer).EnumerateRegisteredSignals(ctx, req.(*EnumerateRegisteredSignalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signals_WriteSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalsServer).WriteSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signals.Signals/WriteSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalsServer).WriteSignal(ctx, req.(*WriteSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signals_ReadSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalsServer).ReadSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signals.Signals/ReadSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalsServer).ReadSignal(ctx, req.(*ReadSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signals_RegisterSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalsServer).RegisterSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signals.Signals/RegisterSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalsServer).RegisterSignal(ctx, req.(*RegisterSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Signals_ServiceDesc is the grpc.ServiceDesc for Signals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signals.Signals",
	HandlerType: (*SignalsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnumerateRegisteredSignals",
			Handler:    _Signals_EnumerateRegisteredSignals_Handler,
		},
		{
			MethodName: "WriteSignal",
			Handler:    _Signals_WriteSignal_Handler,
		},
		{
			MethodName: "ReadSignal",
			Handler:    _Signals_ReadSignal_Handler,
		},
		{
			MethodName: "RegisterSignal",
			Handler:    _Signals_RegisterSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/signals.proto",
}
