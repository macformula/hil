// Code generated by "enumer -type=Pin pin.go"; DO NOT EDIT.

package raspi

import (
	"fmt"
	"strings"
)

const _PinName = "Gpio0Gpio1Gpio2Gpio3Gpio4Gpio5Gpio6Gpio12Gpio13Gpio14Gpio15Gpio16Gpio17Gpio18Gpio19Gpio20Gpio21Gpio22Gpio24Gpio26Gpio27"

var _PinIndex = [...]uint8{0, 5, 10, 15, 20, 25, 30, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107, 113, 119}

const _PinLowerName = "gpio0gpio1gpio2gpio3gpio4gpio5gpio6gpio12gpio13gpio14gpio15gpio16gpio17gpio18gpio19gpio20gpio21gpio22gpio24gpio26gpio27"

func (i Pin) String() string {
	if i >= Pin(len(_PinIndex)-1) {
		return fmt.Sprintf("Pin(%d)", i)
	}
	return _PinName[_PinIndex[i]:_PinIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PinNoOp() {
	var x [1]struct{}
	_ = x[Gpio0-(0)]
	_ = x[Gpio1-(1)]
	_ = x[Gpio2-(2)]
	_ = x[Gpio3-(3)]
	_ = x[Gpio4-(4)]
	_ = x[Gpio5-(5)]
	_ = x[Gpio6-(6)]
	_ = x[Gpio12-(7)]
	_ = x[Gpio13-(8)]
	_ = x[Gpio14-(9)]
	_ = x[Gpio15-(10)]
	_ = x[Gpio16-(11)]
	_ = x[Gpio17-(12)]
	_ = x[Gpio18-(13)]
	_ = x[Gpio19-(14)]
	_ = x[Gpio20-(15)]
	_ = x[Gpio21-(16)]
	_ = x[Gpio22-(17)]
	_ = x[Gpio24-(18)]
	_ = x[Gpio26-(19)]
	_ = x[Gpio27-(20)]
}

var _PinValues = []Pin{Gpio0, Gpio1, Gpio2, Gpio3, Gpio4, Gpio5, Gpio6, Gpio12, Gpio13, Gpio14, Gpio15, Gpio16, Gpio17, Gpio18, Gpio19, Gpio20, Gpio21, Gpio22, Gpio24, Gpio26, Gpio27}

var _PinNameToValueMap = map[string]Pin{
	_PinName[0:5]:          Gpio0,
	_PinLowerName[0:5]:     Gpio0,
	_PinName[5:10]:         Gpio1,
	_PinLowerName[5:10]:    Gpio1,
	_PinName[10:15]:        Gpio2,
	_PinLowerName[10:15]:   Gpio2,
	_PinName[15:20]:        Gpio3,
	_PinLowerName[15:20]:   Gpio3,
	_PinName[20:25]:        Gpio4,
	_PinLowerName[20:25]:   Gpio4,
	_PinName[25:30]:        Gpio5,
	_PinLowerName[25:30]:   Gpio5,
	_PinName[30:35]:        Gpio6,
	_PinLowerName[30:35]:   Gpio6,
	_PinName[35:41]:        Gpio12,
	_PinLowerName[35:41]:   Gpio12,
	_PinName[41:47]:        Gpio13,
	_PinLowerName[41:47]:   Gpio13,
	_PinName[47:53]:        Gpio14,
	_PinLowerName[47:53]:   Gpio14,
	_PinName[53:59]:        Gpio15,
	_PinLowerName[53:59]:   Gpio15,
	_PinName[59:65]:        Gpio16,
	_PinLowerName[59:65]:   Gpio16,
	_PinName[65:71]:        Gpio17,
	_PinLowerName[65:71]:   Gpio17,
	_PinName[71:77]:        Gpio18,
	_PinLowerName[71:77]:   Gpio18,
	_PinName[77:83]:        Gpio19,
	_PinLowerName[77:83]:   Gpio19,
	_PinName[83:89]:        Gpio20,
	_PinLowerName[83:89]:   Gpio20,
	_PinName[89:95]:        Gpio21,
	_PinLowerName[89:95]:   Gpio21,
	_PinName[95:101]:       Gpio22,
	_PinLowerName[95:101]:  Gpio22,
	_PinName[101:107]:      Gpio24,
	_PinLowerName[101:107]: Gpio24,
	_PinName[107:113]:      Gpio26,
	_PinLowerName[107:113]: Gpio26,
	_PinName[113:119]:      Gpio27,
	_PinLowerName[113:119]: Gpio27,
}

var _PinNames = []string{
	_PinName[0:5],
	_PinName[5:10],
	_PinName[10:15],
	_PinName[15:20],
	_PinName[20:25],
	_PinName[25:30],
	_PinName[30:35],
	_PinName[35:41],
	_PinName[41:47],
	_PinName[47:53],
	_PinName[53:59],
	_PinName[59:65],
	_PinName[65:71],
	_PinName[71:77],
	_PinName[77:83],
	_PinName[83:89],
	_PinName[89:95],
	_PinName[95:101],
	_PinName[101:107],
	_PinName[107:113],
	_PinName[113:119],
}

// PinString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PinString(s string) (Pin, error) {
	if val, ok := _PinNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PinNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pin values", s)
}

// PinValues returns all values of the enum
func PinValues() []Pin {
	return _PinValues
}

// PinStrings returns a slice of all String values of the enum
func PinStrings() []string {
	strs := make([]string, len(_PinNames))
	copy(strs, _PinNames)
	return strs
}

// IsAPin returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pin) IsAPin() bool {
	for _, v := range _PinValues {
		if i == v {
			return true
		}
	}
	return false
}
