// Code generated by "enumer -type=Pin pin.go"; DO NOT EDIT.

package raspi

import (
	"fmt"
	"strings"
)

const _PinName = "Gpio0Gpio1Gpio2Gpio3Gpio4Gpio5Gpio6Gpio7Gpio8Gpio9Gpio10Gpio11Gpio12Gpio13Gpio14Gpio15Gpio16Gpio17Gpio18Gpio19Gpio20Gpio21Gpio22Gpio23Gpio24Gpio25Gpio26Gpio27"

var _PinIndex = [...]uint8{0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 56, 62, 68, 74, 80, 86, 92, 98, 104, 110, 116, 122, 128, 134, 140, 146, 152, 158}

const _PinLowerName = "gpio0gpio1gpio2gpio3gpio4gpio5gpio6gpio7gpio8gpio9gpio10gpio11gpio12gpio13gpio14gpio15gpio16gpio17gpio18gpio19gpio20gpio21gpio22gpio23gpio24gpio25gpio26gpio27"

func (i Pin) String() string {
	if i >= Pin(len(_PinIndex)-1) {
		return fmt.Sprintf("Pin(%d)", i)
	}
	return _PinName[_PinIndex[i]:_PinIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PinNoOp() {
	var x [1]struct{}
	_ = x[Gpio0-(0)]
	_ = x[Gpio1-(1)]
	_ = x[Gpio2-(2)]
	_ = x[Gpio3-(3)]
	_ = x[Gpio4-(4)]
	_ = x[Gpio5-(5)]
	_ = x[Gpio6-(6)]
	_ = x[Gpio7-(7)]
	_ = x[Gpio8-(8)]
	_ = x[Gpio9-(9)]
	_ = x[Gpio10-(10)]
	_ = x[Gpio11-(11)]
	_ = x[Gpio12-(12)]
	_ = x[Gpio13-(13)]
	_ = x[Gpio14-(14)]
	_ = x[Gpio15-(15)]
	_ = x[Gpio16-(16)]
	_ = x[Gpio17-(17)]
	_ = x[Gpio18-(18)]
	_ = x[Gpio19-(19)]
	_ = x[Gpio20-(20)]
	_ = x[Gpio21-(21)]
	_ = x[Gpio22-(22)]
	_ = x[Gpio23-(23)]
	_ = x[Gpio24-(24)]
	_ = x[Gpio25-(25)]
	_ = x[Gpio26-(26)]
	_ = x[Gpio27-(27)]
}

var _PinValues = []Pin{Gpio0, Gpio1, Gpio2, Gpio3, Gpio4, Gpio5, Gpio6, Gpio7, Gpio8, Gpio9, Gpio10, Gpio11, Gpio12, Gpio13, Gpio14, Gpio15, Gpio16, Gpio17, Gpio18, Gpio19, Gpio20, Gpio21, Gpio22, Gpio23, Gpio24, Gpio25, Gpio26, Gpio27}

var _PinNameToValueMap = map[string]Pin{
	_PinName[0:5]:          Gpio0,
	_PinLowerName[0:5]:     Gpio0,
	_PinName[5:10]:         Gpio1,
	_PinLowerName[5:10]:    Gpio1,
	_PinName[10:15]:        Gpio2,
	_PinLowerName[10:15]:   Gpio2,
	_PinName[15:20]:        Gpio3,
	_PinLowerName[15:20]:   Gpio3,
	_PinName[20:25]:        Gpio4,
	_PinLowerName[20:25]:   Gpio4,
	_PinName[25:30]:        Gpio5,
	_PinLowerName[25:30]:   Gpio5,
	_PinName[30:35]:        Gpio6,
	_PinLowerName[30:35]:   Gpio6,
	_PinName[35:40]:        Gpio7,
	_PinLowerName[35:40]:   Gpio7,
	_PinName[40:45]:        Gpio8,
	_PinLowerName[40:45]:   Gpio8,
	_PinName[45:50]:        Gpio9,
	_PinLowerName[45:50]:   Gpio9,
	_PinName[50:56]:        Gpio10,
	_PinLowerName[50:56]:   Gpio10,
	_PinName[56:62]:        Gpio11,
	_PinLowerName[56:62]:   Gpio11,
	_PinName[62:68]:        Gpio12,
	_PinLowerName[62:68]:   Gpio12,
	_PinName[68:74]:        Gpio13,
	_PinLowerName[68:74]:   Gpio13,
	_PinName[74:80]:        Gpio14,
	_PinLowerName[74:80]:   Gpio14,
	_PinName[80:86]:        Gpio15,
	_PinLowerName[80:86]:   Gpio15,
	_PinName[86:92]:        Gpio16,
	_PinLowerName[86:92]:   Gpio16,
	_PinName[92:98]:        Gpio17,
	_PinLowerName[92:98]:   Gpio17,
	_PinName[98:104]:       Gpio18,
	_PinLowerName[98:104]:  Gpio18,
	_PinName[104:110]:      Gpio19,
	_PinLowerName[104:110]: Gpio19,
	_PinName[110:116]:      Gpio20,
	_PinLowerName[110:116]: Gpio20,
	_PinName[116:122]:      Gpio21,
	_PinLowerName[116:122]: Gpio21,
	_PinName[122:128]:      Gpio22,
	_PinLowerName[122:128]: Gpio22,
	_PinName[128:134]:      Gpio23,
	_PinLowerName[128:134]: Gpio23,
	_PinName[134:140]:      Gpio24,
	_PinLowerName[134:140]: Gpio24,
	_PinName[140:146]:      Gpio25,
	_PinLowerName[140:146]: Gpio25,
	_PinName[146:152]:      Gpio26,
	_PinLowerName[146:152]: Gpio26,
	_PinName[152:158]:      Gpio27,
	_PinLowerName[152:158]: Gpio27,
}

var _PinNames = []string{
	_PinName[0:5],
	_PinName[5:10],
	_PinName[10:15],
	_PinName[15:20],
	_PinName[20:25],
	_PinName[25:30],
	_PinName[30:35],
	_PinName[35:40],
	_PinName[40:45],
	_PinName[45:50],
	_PinName[50:56],
	_PinName[56:62],
	_PinName[62:68],
	_PinName[68:74],
	_PinName[74:80],
	_PinName[80:86],
	_PinName[86:92],
	_PinName[92:98],
	_PinName[98:104],
	_PinName[104:110],
	_PinName[110:116],
	_PinName[116:122],
	_PinName[122:128],
	_PinName[128:134],
	_PinName[134:140],
	_PinName[140:146],
	_PinName[146:152],
	_PinName[152:158],
}

// PinString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PinString(s string) (Pin, error) {
	if val, ok := _PinNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PinNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pin values", s)
}

// PinValues returns all values of the enum
func PinValues() []Pin {
	return _PinValues
}

// PinStrings returns a slice of all String values of the enum
func PinStrings() []string {
	strs := make([]string, len(_PinNames))
	copy(strs, _PinNames)
	return strs
}

// IsAPin returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pin) IsAPin() bool {
	for _, v := range _PinValues {
		if i == v {
			return true
		}
	}
	return false
}
