// Code generated by "enumer -type=Level types.go"; DO NOT EDIT.

package iocontrol

import (
	"fmt"
	"strings"
)

const _LevelName = "UnknownLowHigh"

var _LevelIndex = [...]uint8{0, 7, 10, 14}

const _LevelLowerName = "unknownlowhigh"

func (i Level) String() string {
	i -= -1
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i+-1)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(-1)]
	_ = x[Low-(0)]
	_ = x[High-(1)]
}

var _LevelValues = []Level{Unknown, Low, High}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:7]:        Unknown,
	_LevelLowerName[0:7]:   Unknown,
	_LevelName[7:10]:       Low,
	_LevelLowerName[7:10]:  Low,
	_LevelName[10:14]:      High,
	_LevelLowerName[10:14]: High,
}

var _LevelNames = []string{
	_LevelName[0:7],
	_LevelName[7:10],
	_LevelName[10:14],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}
