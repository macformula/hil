// Code generated by "enumer -type=ComparisonOperator"; DO NOT EDIT.

package results

import (
	"fmt"
	"strings"
)

const _ComparisonOperatorName = "EqGeleGtltGtLtGeLeLog"

var _ComparisonOperatorIndex = [...]uint8{0, 2, 6, 10, 12, 14, 16, 18, 21}

const _ComparisonOperatorLowerName = "eqgelegtltgtltgelelog"

func (i ComparisonOperator) String() string {
	if i < 0 || i >= ComparisonOperator(len(_ComparisonOperatorIndex)-1) {
		return fmt.Sprintf("ComparisonOperator(%d)", i)
	}
	return _ComparisonOperatorName[_ComparisonOperatorIndex[i]:_ComparisonOperatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparisonOperatorNoOp() {
	var x [1]struct{}
	_ = x[Eq-(0)]
	_ = x[Gele-(1)]
	_ = x[Gtlt-(2)]
	_ = x[Gt-(3)]
	_ = x[Lt-(4)]
	_ = x[Ge-(5)]
	_ = x[Le-(6)]
	_ = x[Log-(7)]
}

var _ComparisonOperatorValues = []ComparisonOperator{Eq, Gele, Gtlt, Gt, Lt, Ge, Le, Log}

var _ComparisonOperatorNameToValueMap = map[string]ComparisonOperator{
	_ComparisonOperatorName[0:2]:        Eq,
	_ComparisonOperatorLowerName[0:2]:   Eq,
	_ComparisonOperatorName[2:6]:        Gele,
	_ComparisonOperatorLowerName[2:6]:   Gele,
	_ComparisonOperatorName[6:10]:       Gtlt,
	_ComparisonOperatorLowerName[6:10]:  Gtlt,
	_ComparisonOperatorName[10:12]:      Gt,
	_ComparisonOperatorLowerName[10:12]: Gt,
	_ComparisonOperatorName[12:14]:      Lt,
	_ComparisonOperatorLowerName[12:14]: Lt,
	_ComparisonOperatorName[14:16]:      Ge,
	_ComparisonOperatorLowerName[14:16]: Ge,
	_ComparisonOperatorName[16:18]:      Le,
	_ComparisonOperatorLowerName[16:18]: Le,
	_ComparisonOperatorName[18:21]:      Log,
	_ComparisonOperatorLowerName[18:21]: Log,
}

var _ComparisonOperatorNames = []string{
	_ComparisonOperatorName[0:2],
	_ComparisonOperatorName[2:6],
	_ComparisonOperatorName[6:10],
	_ComparisonOperatorName[10:12],
	_ComparisonOperatorName[12:14],
	_ComparisonOperatorName[14:16],
	_ComparisonOperatorName[16:18],
	_ComparisonOperatorName[18:21],
}

// ComparisonOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonOperatorString(s string) (ComparisonOperator, error) {
	if val, ok := _ComparisonOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparisonOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparisonOperator values", s)
}

// ComparisonOperatorValues returns all values of the enum
func ComparisonOperatorValues() []ComparisonOperator {
	return _ComparisonOperatorValues
}

// ComparisonOperatorStrings returns a slice of all String values of the enum
func ComparisonOperatorStrings() []string {
	strs := make([]string, len(_ComparisonOperatorNames))
	copy(strs, _ComparisonOperatorNames)
	return strs
}

// IsAComparisonOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparisonOperator) IsAComparisonOperator() bool {
	for _, v := range _ComparisonOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}
