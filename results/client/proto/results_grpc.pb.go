// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: results.proto

package __client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagTunnelClient is the client API for TagTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagTunnelClient interface {
	SubmitTag(ctx context.Context, in *SubmitTagRequest, opts ...grpc.CallOption) (*SubmitTagReply, error)
}

type tagTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTagTunnelClient(cc grpc.ClientConnInterface) TagTunnelClient {
	return &tagTunnelClient{cc}
}

func (c *tagTunnelClient) SubmitTag(ctx context.Context, in *SubmitTagRequest, opts ...grpc.CallOption) (*SubmitTagReply, error) {
	out := new(SubmitTagReply)
	err := c.cc.Invoke(ctx, "/ResultsProcessor.TagTunnel/SubmitTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagTunnelServer is the server API for TagTunnel service.
// All implementations must embed UnimplementedTagTunnelServer
// for forward compatibility
type TagTunnelServer interface {
	SubmitTag(context.Context, *SubmitTagRequest) (*SubmitTagReply, error)
	mustEmbedUnimplementedTagTunnelServer()
}

// UnimplementedTagTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTagTunnelServer struct {
}

func (UnimplementedTagTunnelServer) SubmitTag(context.Context, *SubmitTagRequest) (*SubmitTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTag not implemented")
}
func (UnimplementedTagTunnelServer) mustEmbedUnimplementedTagTunnelServer() {}

// UnsafeTagTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagTunnelServer will
// result in compilation errors.
type UnsafeTagTunnelServer interface {
	mustEmbedUnimplementedTagTunnelServer()
}

func RegisterTagTunnelServer(s grpc.ServiceRegistrar, srv TagTunnelServer) {
	s.RegisterService(&TagTunnel_ServiceDesc, srv)
}

func _TagTunnel_SubmitTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagTunnelServer).SubmitTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResultsProcessor.TagTunnel/SubmitTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagTunnelServer).SubmitTag(ctx, req.(*SubmitTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagTunnel_ServiceDesc is the grpc.ServiceDesc for TagTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResultsProcessor.TagTunnel",
	HandlerType: (*TagTunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTag",
			Handler:    _TagTunnel_SubmitTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "results.proto",
}
