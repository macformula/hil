import pytest
from ra_test import RATest

ra = RATest.get_ra()

@pytest.fixture
def tag_db():
    return ra.tag_db

@pytest.fixture
def tag_submissions():
    return ra.tag_submissions

@pytest.fixture
def errors():
    return ra.error_submissions

def test_overall(errors):
    """Overall pass/fail"""
    if ra.error_submissions:
        print(f"Errors: {ra.error_submissions}")
    else:
        print("No Errors Encountered!")
    assert not ra.error_submissions

{% for tag_id in tag_ids %}
def test_{{ tag_id }}(tag_db, tag_submissions):
    """
        {% set tag = tag_db[tag_id] %}
        {% if tag.comp_op == "GELE" %}
            The submitted value should be greater than or equal to {{ tag.lower_limit }}
            and less than or equal to {{ tag.upper_limit }}.
        {% elif tag.comp_op == "GTLT" %}
            The submitted value should be greater than {{ tag.lower_limit }}
            and less than {{ tag.upper_limit }}.
        {% elif tag.comp_op == "EQ" %}
            The submitted value should be equal to {{ tag.expected_val }}.
        {% elif tag.comp_op == "GT" %}
            The submitted value should be greater than {{ tag.lower_limit }}.
        {% elif tag.comp_op == "GE" %}
            The submitted value should be greater than or equal to {{ tag.lower_limit }}.
        {% elif tag.comp_op == "LT" %}
            The submitted value should be less than {{ tag.upper_limit }}.
        {% elif tag.comp_op == "LE" %}
            The submitted value should be less than or equal to {{ tag.upper_limit }}.
        {% elif tag.comp_op == "LOG" %}
            Always True.
        {% else %}
            Unsupported comparison operator.
        {% endif %}
    """
    tag = tag_db["{{ tag_id }}"]
    tag_value = tag_submissions["{{ tag_id }}"]
    print(f"value submitted: {tag_value}")
    print(tag)
    assert tag.is_passing(tag_value)
{% endfor %}