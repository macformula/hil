// Code generated by "enumer -type=screenState screenstate.go"; DO NOT EDIT.

package cli

import (
	"fmt"
	"strings"
)

const _screenStateName = "UnknownIdleRunningFatalErrorResults"

var _screenStateIndex = [...]uint8{0, 7, 11, 18, 28, 35}

const _screenStateLowerName = "unknownidlerunningfatalerrorresults"

func (i screenState) String() string {
	if i < 0 || i >= screenState(len(_screenStateIndex)-1) {
		return fmt.Sprintf("screenState(%d)", i)
	}
	return _screenStateName[_screenStateIndex[i]:_screenStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _screenStateNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
	_ = x[Idle-(1)]
	_ = x[Running-(2)]
	_ = x[FatalError-(3)]
	_ = x[Results-(4)]
}

var _screenStateValues = []screenState{Unknown, Idle, Running, FatalError, Results}

var _screenStateNameToValueMap = map[string]screenState{
	_screenStateName[0:7]:        Unknown,
	_screenStateLowerName[0:7]:   Unknown,
	_screenStateName[7:11]:       Idle,
	_screenStateLowerName[7:11]:  Idle,
	_screenStateName[11:18]:      Running,
	_screenStateLowerName[11:18]: Running,
	_screenStateName[18:28]:      FatalError,
	_screenStateLowerName[18:28]: FatalError,
	_screenStateName[28:35]:      Results,
	_screenStateLowerName[28:35]: Results,
}

var _screenStateNames = []string{
	_screenStateName[0:7],
	_screenStateName[7:11],
	_screenStateName[11:18],
	_screenStateName[18:28],
	_screenStateName[28:35],
}

// screenStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func screenStateString(s string) (screenState, error) {
	if val, ok := _screenStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _screenStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to screenState values", s)
}

// screenStateValues returns all values of the enum
func screenStateValues() []screenState {
	return _screenStateValues
}

// screenStateStrings returns a slice of all String values of the enum
func screenStateStrings() []string {
	strs := make([]string, len(_screenStateNames))
	copy(strs, _screenStateNames)
	return strs
}

// IsAscreenState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i screenState) IsAscreenState() bool {
	for _, v := range _screenStateValues {
		if i == v {
			return true
		}
	}
	return false
}
