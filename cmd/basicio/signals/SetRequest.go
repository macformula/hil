// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package signals

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSetRequest(buf []byte, offset flatbuffers.UOffsetT) *SetRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetRequest(buf []byte, offset flatbuffers.UOffsetT) *SetRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetRequest) EcuName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SetRequest) SignalName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SetRequest) SignalType() SIGNAL_TYPE {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return SIGNAL_TYPE(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SetRequest) MutateSignalType(n SIGNAL_TYPE) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *SetRequest) SignalValueType() SignalValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return SignalValue(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SetRequest) MutateSignalValueType(n SignalValue) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *SetRequest) SignalValue(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *SetRequest) SignalDirection() SIGNAL_DIRECTION {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return SIGNAL_DIRECTION(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SetRequest) MutateSignalDirection(n SIGNAL_DIRECTION) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

func SetRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SetRequestAddEcuName(builder *flatbuffers.Builder, ecuName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ecuName), 0)
}
func SetRequestAddSignalName(builder *flatbuffers.Builder, signalName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(signalName), 0)
}
func SetRequestAddSignalType(builder *flatbuffers.Builder, signalType SIGNAL_TYPE) {
	builder.PrependInt8Slot(2, int8(signalType), 0)
}
func SetRequestAddSignalValueType(builder *flatbuffers.Builder, signalValueType SignalValue) {
	builder.PrependByteSlot(3, byte(signalValueType), 0)
}
func SetRequestAddSignalValue(builder *flatbuffers.Builder, signalValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(signalValue), 0)
}
func SetRequestAddSignalDirection(builder *flatbuffers.Builder, signalDirection SIGNAL_DIRECTION) {
	builder.PrependInt8Slot(5, int8(signalDirection), 0)
}
func SetRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
